"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const toMS_1 = __importDefault(require("./utility/toMS"));
const toTimeString_1 = __importDefault(require("./utility/toTimeString"));
const type = ["year", "week", "day", "hour", "minute", "second", "millisecond"];
function convertor(time, options = {}) {
    if (typeof time !== "number" && typeof time !== "string")
        throw new TypeError("Inavlid time was provided, It should be either a number or human readable time string");
    const { max = 7, expanded = true, returnObject = false, till = "millisecond" } = options;
    if (typeof max !== "number" || max < 1)
        throw new TypeError("Invalid max was provided, it should be a number and at least 1");
    if (typeof expanded !== "boolean")
        throw new TypeError("Expanded should be a boolean type");
    if (typeof returnObject !== "boolean")
        throw new TypeError("Expanded should be a boolean type");
    if (!type.some(v => v === till))
        throw new Error(`Till should be one of these values : ${type.join(", ")} but we got ${JSON.stringify(till)}`);
    if (typeof time === "string")
        return (0, toMS_1.default)(time === null || time === void 0 ? void 0 : time.trim());
    return (0, toTimeString_1.default)(time, max, expanded, returnObject, till);
}
exports.default = convertor;
